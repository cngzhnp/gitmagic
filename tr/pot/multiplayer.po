# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-11-14 23:23+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../en/multiplayer.txt:2
msgid "== Multiplayer Git =="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:6
msgid ""
"Initially I used Git on a private project where I was the sole developer.  "
"Amongst the commands related to Git's distributed nature, I needed only "
"*pull* and *clone* so could I keep the same project in different places."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:11
msgid ""
"Later I wanted to publish my code with Git, and include changes from "
"contributors. I had to learn how to manage projects with multiple developers "
"from all over the world. Fortunately, this is Git's forte, and arguably its "
"raison d'Ãªtre."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:13
msgid "=== Who Am I? ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:17
msgid ""
"Every commit has an author name and email, which is shown by *git log*.  By "
"default, Git uses system settings to populate these fields.  To set them "
"explicitly, type:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:20
#, no-wrap
msgid ""
"  $ git config --global user.name \"John Doe\"\n"
"  $ git config --global user.email johndoe@example.com\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:22
msgid "Omit the global flag to set these options only for the current repository."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:24
msgid "=== Git Over SSH, HTTP ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:27
msgid ""
"Suppose you have SSH access to a web server, but Git is not "
"installed. Though less efficient than its native protocol, Git can "
"communicate over HTTP."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:30
msgid ""
"Download, compile and install Git in your account, and create a repository "
"in your web directory:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:35
#, no-wrap
msgid ""
" $ GIT_DIR=proj.git git init\n"
" $ cd proj.git\n"
" $ git --bare update-server-info\n"
" $ cp hooks/post-update.sample hooks/post-update\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:37
msgid "For older versions of Git, the copy command fails and you should run:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:39
#, no-wrap
msgid " $ chmod a+x hooks/post-update\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:41
msgid "Now you can publish your latest edits via SSH from any clone:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:43
#, no-wrap
msgid " $ git push web.server:/path/to/proj.git master\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:45
msgid "and anybody can get your project with:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:47
#, no-wrap
msgid " $ git clone http://web.server/proj.git\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:49
msgid "=== Git Over Anything ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:55
msgid ""
"Want to synchronize repositories without servers, or even a network "
"connection? Need to improvise during an emergency? We've seen "
"<<makinghistory, *git fast-export* and *git fast-import* can convert "
"repositories to a single file and back>>. We could shuttle such files back "
"and forth to transport git repositories over any medium, but a more "
"efficient tool is *git bundle*."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:57
msgid "The sender creates a 'bundle':"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:59
#, no-wrap
msgid " $ git bundle create somefile HEAD\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:63
msgid ""
"then transports the bundle, +somefile+, to the other party somehow: email, "
"thumb drive, an *xxd* printout and an OCR scanner, reading bits over the "
"phone, smoke signals, etc. The receiver retrieves commits from the bundle by "
"typing:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:65
#, no-wrap
msgid " $ git pull somefile\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:68
msgid ""
"The receiver can even do this from an empty repository. Despite its size, "
"+somefile+ contains the entire original git repository."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:72
msgid ""
"In larger projects, eliminate waste by bundling only changes the other "
"repository lacks. For example, suppose the commit ``1b6d...'' is the most "
"recent commit shared by both parties:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:74
#, no-wrap
msgid " $ git bundle create somefile HEAD ^1b6d\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:78
msgid ""
"If done frequently, one could easily forget which commit was last sent. The "
"help page suggests using tags to solve this. Namely, after you send a "
"bundle, type:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:80
#, no-wrap
msgid " $ git tag -f lastbundle HEAD\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:82
msgid "and create new refresher bundles with:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:84
#, no-wrap
msgid " $ git bundle create newbundle HEAD ^lastbundle\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:86
msgid "=== Patches: The Global Currency ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:92
msgid ""
"Patches are text representations of your changes that can be easily "
"understood by computers and humans alike. This gives them universal "
"appeal. You can email a patch to developers no matter what version control "
"system they're using. As long as your audience can read their email, they "
"can see your edits. Similarly, on your side, all you require is an email "
"account: there's no need to setup an online Git repository."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:94
msgid "Recall from the first chapter:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:96
#, no-wrap
msgid " $ git diff 1b6d > my.patch\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:99
msgid ""
"outputs a patch which can be pasted into an email for discussion. In a Git "
"repository, type:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:101
#, no-wrap
msgid " $ git apply < my.patch\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:103
msgid "to apply the patch."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:106
msgid ""
"In more formal settings, when author names and perhaps signatures should be "
"recorded, generate the corresponding patches past a certain point by typing:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:108
#, no-wrap
msgid " $ git format-patch 1b6d\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:110
msgid ""
"The resulting files can be given to *git-send-email*, or sent by hand. You "
"can also specify a range of commits:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:112
#, no-wrap
msgid " $ git format-patch 1b6d..HEAD^^\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:114
msgid "On the receiving end, save an email to a file, then type:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:116
#, no-wrap
msgid " $ git am < email.txt\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:118
msgid ""
"This applies the incoming patch and also creates a commit, including "
"information such as the author."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:120
msgid ""
"With a browser email client, you may need to click a button to see the email "
"in its raw original form before saving the patch to a file."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:124
msgid ""
"There are slight differences for mbox-based email clients, but if you use "
"one of these, you're probably the sort of person who can figure them out "
"easily without reading tutorials!"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:126
msgid "=== Sorry, We've Moved ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:130
msgid ""
"After cloning a repository, running *git push* or *git pull* will "
"automatically push to or pull from the original URL. How does Git do this? "
"The secret lies in config options created with the clone. Let's take a peek:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:132
#, no-wrap
msgid " $ git config --list\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:136
msgid ""
"The +remote.origin.url+ option controls the source URL; ``origin'' is a "
"nickname given to the source repository. As with the ``master'' branch "
"convention, we may change or delete this nickname but there is usually no "
"reason for doing so."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:138
msgid "If the original repository moves, we can update the URL via:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:140
#, no-wrap
msgid " $ git config remote.origin.url git://new.url/proj.git\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:146
msgid ""
"The +branch.master.merge+ option specifies the default remote branch in a "
"*git pull*. During the initial clone, it is set to the current branch of the "
"source repository, so even if the HEAD of the source repository subsequently "
"moves to a different branch, a later pull will faithfully follow the "
"original branch."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:150
msgid ""
"This option only applies to the repository we first cloned from, which is "
"recorded in the option +branch.master.remote+. If we pull in from other "
"repositories we must explicitly state which branch we want:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:152
#, no-wrap
msgid " $ git pull git://example.com/other.git master\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:155
msgid ""
"The above explains why some of our earlier push and pull examples had no "
"arguments."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:157
msgid "=== Remote Branches ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:162
msgid ""
"When you clone a repository, you also clone all its branches. You may not "
"have noticed this because Git hides them away: you must ask for them "
"specifically.  This prevents branches in the remote repository from "
"interfering with your branches, and also makes Git easier for beginners."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:164
msgid "List the remote branches with:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:166
#, no-wrap
msgid " $ git branch -r\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:168
msgid "You should see something like:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:172
#, no-wrap
msgid ""
" origin/HEAD\n"
" origin/master\n"
" origin/experimental\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:177
msgid ""
"These represent branches and the HEAD of the remote repository, and can be "
"used in regular Git commands. For example, suppose you have made many "
"commits, and wish to compare against the last fetched version. You could "
"search through the logs for the appropriate SHA1 hash, but it's much easier "
"to type:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:179
#, no-wrap
msgid " $ git diff origin/HEAD\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:181
msgid "Or you can see what the ``experimental'' branch has been up to:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:183
#, no-wrap
msgid " $ git log origin/experimental\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:185
msgid "=== Multiple Remotes ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:188
msgid ""
"Suppose two other developers are working on our project, and we want to keep "
"tabs on both. We can follow more than one repository at a time with:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:191
#, no-wrap
msgid ""
" $ git remote add other git://example.com/some_repo.git\n"
" $ git pull other some_branch\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:194
msgid ""
"Now we have merged in a branch from the second repository, and we have easy "
"access to all branches of all repositories:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:196
#, no-wrap
msgid " $ git diff origin/experimental^ other/some_branch~5\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:200
msgid ""
"But what if we just want to compare their changes without affecting our own "
"work? In other words, we want to examine their branches without having their "
"changes invade our working directory. Then rather than pull, run:"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:203
#, no-wrap
msgid ""
" $ git fetch        # Fetch from origin, the default.\n"
" $ git fetch other  # Fetch from the second programmer.\n"
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:207
msgid ""
"This just fetches histories. Although the working directory remains "
"untouched, we can refer to any branch of any repository in a Git command "
"because we now possess a local copy."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:211
msgid ""
"Recall that behind the scenes, a pull is simply a *fetch* then *merge*.  "
"Usually we *pull* because we want to merge the latest commit after a fetch; "
"this situation is a notable exception."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:214
msgid ""
"See *git help remote* for how to remove remote repositories, ignore certain "
"branches, and more."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:216
msgid "=== My Preferences ==="
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:220
msgid ""
"For my projects, I like contributors to prepare repositories from which I "
"can pull. Some Git hosting services let you host your own fork of a project "
"with the click of a button."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:224
msgid ""
"After I fetch a tree, I run Git commands to navigate and examine the "
"changes, which ideally are well-organized and well-described. I merge my own "
"changes, and perhaps make further edits. Once satisfied, I push to the main "
"repository."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:229
msgid ""
"Though I infrequently receive contributions, I believe this approach scales "
"well. See "
"http://torvalds-family.blogspot.com/2009/06/happiness-is-warm-scm.html[this "
"blog post by Linus Torvalds]."
msgstr ""

#. type: Plain text
#: ../en/multiplayer.txt:233
msgid ""
"Staying in the Git world is slightly more convenient than patch files, as it "
"saves me from converting them to Git commits. Furthermore, Git handles "
"details such as recording the author's name and email address, as well as "
"the time and date, and asks the author to describe their own change."
msgstr ""

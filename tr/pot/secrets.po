# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-11-14 23:23+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../en/secrets.txt:2
msgid "== Secrets Revealed =="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:4
msgid ""
"We take a peek under the hood and explain how Git performs its miracles. I "
"will skimp over details. For in-depth descriptions refer to "
"http://schacon.github.com/git/user-manual.html[the user manual]."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:6
msgid "=== Invisibility ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:8
msgid ""
"How can Git be so unobtrusive? Aside from occasional commits and merges, you "
"can work as if you were unaware that version control exists. That is, until "
"you need it, and that's when you're glad Git was watching over you the whole "
"time."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:10
msgid ""
"Other version control systems force you to constantly struggle with red tape "
"and bureaucracy. Permissions of files may be read-only unless you explicitly "
"tell a central server which files you intend to edit. The most basic "
"commands may slow to a crawl as the number of users increases. Work grinds "
"to a halt when the network or the central server goes down."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:12
msgid ""
"In contrast, Git simply keeps the history of your project in the `.git` "
"directory in your working directory. This is your own copy of the history, "
"so you can stay offline until you want to communicate with others. You have "
"total control over the fate of your files because Git can easily recreate a "
"saved state from `.git` at any time."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:14
msgid "=== Integrity ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:16
msgid ""
"Most people associate cryptography with keeping information secret, but "
"another equally important goal is keeping information safe. Proper use of "
"cryptographic hash functions can prevent accidental or malicious data "
"corruption."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:18
msgid ""
"A SHA1 hash can be thought of as a unique 160-bit ID number for every string "
"of bytes you'll encounter in your life. Actually more than that: every "
"string of bytes that any human will ever use over many lifetimes."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:20
msgid ""
"As a SHA1 hash is itself a string of bytes, we can hash strings of bytes "
"containing other hashes. This simple observation is surprisingly useful: "
"look up 'hash chains'. We'll later see how Git uses it to efficiently "
"guarantee data integrity."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:22
msgid ""
"Briefly, Git keeps your data in the `.git/objects` subdirectory, where "
"instead of normal filenames, you'll find only IDs. By using IDs as "
"filenames, as well as a few lockfiles and timestamping tricks, Git "
"transforms any humble filesystem into an efficient and robust database."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:24
msgid "=== Intelligence ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:26
msgid ""
"How does Git know you renamed a file, even though you never mentioned the "
"fact explicitly? Sure, you may have run *git mv*, but that is exactly the "
"same as a *git rm* followed by a *git add*."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:28
msgid ""
"Git heuristically ferrets out renames and copies between successive "
"versions. In fact, it can detect chunks of code being moved or copied around "
"between files! Though it cannot cover all cases, it does a decent job, and "
"this feature is always improving. If it fails to work for you, try options "
"enabling more expensive copy detection, and consider upgrading."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:30
msgid "=== Indexing ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:32
msgid ""
"For every tracked file, Git records information such as its size, creation "
"time and last modification time in a file known as the 'index'. To determine "
"whether a file has changed, Git compares its current stats with those cached "
"in the index. If they match, then Git can skip reading the file again."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:35
msgid ""
"Since stat calls are considerably faster than file reads, if you only edit a "
"few files, Git can update its state in almost no time."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:40
msgid ""
"We stated earlier that the index is a staging area. Why is a bunch of file "
"stats a staging area? Because the add command puts files into Git's database "
"and updates these stats, while the commit command, without options, creates "
"a commit based only on these stats and the files already in the database."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:42
msgid "=== Git's Origins ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:44
msgid ""
"This http://lkml.org/lkml/2005/4/6/121[Linux Kernel Mailing List post] "
"describes the chain of events that led to Git. The entire thread is a "
"fascinating archaeological site for Git historians."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:46
msgid "=== The Object Database ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:52
msgid ""
"Every version of your data is kept in the 'object database', which lives in "
"the subdirectory `.git/objects`; the other residents of `.git/` hold lesser "
"data: the index, branch names, tags, configuration options, logs, the "
"current location of the head commit, and so on. The object database is "
"elementary yet elegant, and the source of Git's power."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:55
msgid ""
"Each file within `.git/objects` is an 'object'. There are 3 kinds of objects "
"that concern us: 'blob' objects, 'tree' objects, and 'commit' objects."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:57
msgid "=== Blobs ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:59
msgid "First, a magic trick. Pick a filename, any filename. In an empty directory:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:64
#, no-wrap
msgid ""
" $ echo sweet > YOUR_FILENAME\n"
" $ git init\n"
" $ git add .\n"
" $ find .git/objects -type f\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:66
msgid "You'll see +.git/objects/aa/823728ea7d592acc69b36875a482cdf3fd5c8d+."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:69
msgid ""
"How do I know this without knowing the filename? It's because the SHA1 hash "
"of:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:71
#, no-wrap
msgid " \"blob\" SP \"6\" NUL \"sweet\" LF\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:75
msgid ""
"is aa823728ea7d592acc69b36875a482cdf3fd5c8d, where SP is a space, NUL is a "
"zero byte and LF is a linefeed. You can verify this by typing:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:77
#, no-wrap
msgid "  $ printf \"blob 6\\000sweet\\n\" | sha1sum\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:84
msgid ""
"Git is 'content-addressable': files are not stored according to their "
"filename, but rather by the hash of the data they contain, in a file we call "
"a 'blob object'. We can think of the hash as a unique ID for a file's "
"contents, so in a sense we are addressing files by their content. The "
"initial `blob 6` is merely a header consisting of the object type and its "
"length in bytes; it simplifies internal bookkeeping."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:87
msgid ""
"Thus I could easily predict what you would see. The file's name is "
"irrelevant: only the data inside is used to construct the blob object."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:91
msgid ""
"You may be wondering what happens to identical files. Try adding copies of "
"your file, with any filenames whatsoever. The contents of +.git/objects+ "
"stay the same no matter how many you add. Git only stores the data once."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:95
msgid ""
"By the way, the files within +.git/objects+ are compressed with zlib so you "
"should not stare at them directly. Filter them through "
"http://www.zlib.net/zpipe.c[zpipe -d], or type:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:97
#, no-wrap
msgid " $ git cat-file -p aa823728ea7d592acc69b36875a482cdf3fd5c8d\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:99
msgid "which pretty-prints the given object."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:101
msgid "=== Trees ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:104
msgid ""
"But where are the filenames? They must be stored somewhere at some stage.  "
"Git gets around to the filenames during a commit:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:107
#, no-wrap
msgid ""
" $ git commit  # Type some message.\n"
" $ find .git/objects -type f\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:109
msgid ""
"You should now see 3 objects. This time I cannot tell you what the 2 new "
"files are, as it partly depends on the filename you picked. We'll proceed "
"assuming you chose ``rose''. If you didn't, you can rewrite history to make "
"it look like you did:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:112
#, no-wrap
msgid ""
" $ git filter-branch --tree-filter 'mv YOUR_FILENAME rose'\n"
" $ find .git/objects -type f\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:116
msgid ""
"Now you should see the file "
"+.git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9+, because this is "
"the SHA1 hash of its contents:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:118
#, no-wrap
msgid ""
" \"tree\" SP \"32\" NUL \"100644 rose\" NUL "
"0xaa823728ea7d592acc69b36875a482cdf3fd5c8d\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:120
msgid "Check this file does indeed contain the above by typing:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:122
#, no-wrap
msgid " $ echo 05b217bb859794d08bb9e4f7f04cbda4b207fbe9 | git cat-file --batch\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:124
msgid "With zpipe, it's easy to verify the hash:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:126
#, no-wrap
msgid ""
" $ zpipe -d < .git/objects/05/b217bb859794d08bb9e4f7f04cbda4b207fbe9 | "
"sha1sum\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:129
msgid ""
"Hash verification is trickier via cat-file because its output contains more "
"than the raw uncompressed object file."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:135
msgid ""
"This file is a 'tree' object: a list of tuples consisting of a file type, a "
"filename, and a hash. In our example, the file type is 100644, which means "
"`rose` is a normal file, and the hash is the blob object that contains the "
"contents of `rose'. Other possible file types are executables, symlinks or "
"directories. In the last case, the hash points to a tree object."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:139
msgid ""
"If you ran filter-branch, you'll have old objects you no longer "
"need. Although they will be jettisoned automatically once the grace period "
"expires, we'll delete them now to make our toy example easier to follow:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:143
#, no-wrap
msgid ""
" $ rm -r .git/refs/original\n"
" $ git reflog expire --expire=now --all\n"
" $ git prune\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:150
msgid ""
"For real projects you should typically avoid commands like this, as you are "
"destroying backups. If you want a clean repository, it is usually best to "
"make a fresh clone. Also, take care when directly manipulating +.git+: what "
"if a Git command is running at the same time, or a sudden power outage "
"occurs? In general, refs should be deleted with *git update-ref -d*, though "
"usually it's safe to remove +refs/original+ by hand."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:152
msgid "=== Commits ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:156
msgid ""
"We've explained 2 of the 3 objects. The third is a 'commit' object. Its "
"contents depend on the commit message as well as the date and time it was "
"created. To match what we have here, we'll have to tweak it a little:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:166
#, no-wrap
msgid ""
" $ git commit --amend -m Shakespeare  # Change the commit message.\n"
" $ git filter-branch --env-filter 'export\n"
"     GIT_AUTHOR_DATE=\"Fri 13 Feb 2009 15:31:30 -0800\"\n"
"     GIT_AUTHOR_NAME=\"Alice\"\n"
"     GIT_AUTHOR_EMAIL=\"alice@example.com\"\n"
"     GIT_COMMITTER_DATE=\"Fri, 13 Feb 2009 15:31:30 -0800\"\n"
"     GIT_COMMITTER_NAME=\"Bob\"\n"
"     GIT_COMMITTER_EMAIL=\"bob@example.com\"'  # Rig timestamps and "
"authors.\n"
" $ find .git/objects -type f\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:170
msgid ""
"You should now see +.git/objects/49/993fe130c4b3bf24857a15d7969c396b7bc187+ "
"which is the SHA1 hash of its contents:"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:177
#, no-wrap
msgid ""
" \"commit 158\" NUL\n"
" \"tree 05b217bb859794d08bb9e4f7f04cbda4b207fbe9\" LF\n"
" \"author Alice <alice@example.com> 1234567890 -0800\" LF\n"
" \"committer Bob <bob@example.com> 1234567890 -0800\" LF\n"
" LF\n"
" \"Shakespeare\" LF\n"
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:179
msgid "As before, you can run zpipe or cat-file to see for yourself."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:182
msgid ""
"This is the first commit, so there are no parent commits, but later commits "
"will always contain at least one line identifying a parent commit."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:184
msgid "=== Indistinguishable From Magic ==="
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:186
msgid ""
"Git's secrets seem too simple. It looks like you could mix together a few "
"shell scripts and add a dash of C code to cook it up in a matter of hours: a "
"melange of basic filesystem operations and SHA1 hashing, garnished with lock "
"files and fsyncs for robustness. In fact, this accurately describes the "
"earliest versions of Git. Nonetheless, apart from ingenious packing tricks "
"to save space, and ingenious indexing tricks to save time, we now know how "
"Git deftly changes a filesystem into a database perfect for version control."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:194
msgid ""
"For example, if any file within the object database is corrupted by a disk "
"error, then its hash will no longer match, alerting us to the problem. By "
"hashing hashes of other objects, we maintain integrity at all "
"levels. Commits are atomic, that is, a commit can never only partially "
"record changes: we can only compute the hash of a commit and store it in the "
"database after we already have stored all relevant trees, blobs and parent "
"commits. The object database is immune to unexpected interruptions such as "
"power outages."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:205
msgid ""
"We defeat even the most devious adversaries. Suppose somebody attempts to "
"stealthily modify the contents of a file in an ancient version of a "
"project. To keep the object database looking healthy, they must also change "
"the hash of the corresponding blob object since it's now a different string "
"of bytes. This means they'll have to change the hash of any tree object "
"referencing the file, and in turn change the hash of all commit objects "
"involving such a tree, in addition to the hashes of all the descendants of "
"these commits. This implies the hash of the official head differs to that of "
"the bad repository. By following the trail of mismatching hashes we can "
"pinpoint the mutilated file, as well as the commit where it was first "
"corrupted."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:208
msgid ""
"In short, so long as the 20 bytes representing the last commit are safe, "
"it's impossible to tamper with a Git repository."
msgstr ""

#. type: Plain text
#: ../en/secrets.txt:214
msgid ""
"What about Git's famous features? Branching? Merging? Tags? Mere "
"details. The current head is kept in the file +.git/HEAD+, which contains a "
"hash of a commit object. The hash gets updated during a commit as well as "
"many other commands. Branches are almost the same: they are files in "
"+.git/refs/heads+. Tags too: they live in +.git/refs/tags+ but they are "
"updated by a different set of commands."
msgstr ""
